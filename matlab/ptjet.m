%PTJETclear allclose allfclose('all');% read parametersparams  % data directory and filefnam      = ['beta=', num2str(pars.beta), '_relax=', num2str(pars.relax)];fnbase    = [pars.fdir, fnam];dataf     = [fnbase, '.dat'];% initialize wavenumberswavnum         = wavnum_init(pars);  % initialize forcingforcing        = forcing_init(pars, wavnum);if init  disp(sprintf('\nStarting integration from background state.'))  if exist(dataf) == 2    error(['File ', dataf, ' already exists.'])   else    fid = fopen(dataf, 'w', 'ieee-le');    disp(sprintf('\nWriting data file:       %s', dataf))  end  % allocate memory for tracer wq and time tendency wdq_dt at three  % time levels  wq      = complex(zeros(pars.nkx, pars.nky));  wdq_dt  = cell(3,1);  for j=1:3    wdq_dt{j} = complex(zeros(size(wq)));  end  % initialize tracer  gq             = repmat(forcing.gfrcd_trcr, pars.nx, 1) ...      + 0.01 * randn(pars.nx, pars.ny);  wq             = wfft2(gq, pars.nkx, pars.nky);  % initialize time level indices  tlev           = [1 2 3];  t              = 0;  % write initial state to data file  snapshot(fid, t, wq)  t_last_diag    = t;  % write initial checkpoint file  t_last_chkpt   = t;  checkpoint(fnbase, pars, t, t_last_diag, t_last_chkpt, wq, wdq_dt, tlev)    % start integration with a forward step ...  wdq_dt{tlev(1)}= dq_dt(wq, forcing, wavnum, pars);  wq             = step_ab2t(wq, wdq_dt, tlev, wavnum.wnum_dmp, 2/3*pars.dt);  tlev           = tlev([3 1 2]);  t              = t + pars.dt;    % ... and a second-order Adams-Bashforth step  wdq_dt{tlev(1)}= dq_dt(wq, forcing, wavnum, pars);  wq             = step_ab2t(wq, wdq_dt, tlev, wavnum.wnum_dmp, pars.dt);  tlev           = tlev([3 1 2]);  t              = t + pars.dt;else  disp(sprintf('\nLoading restart file %s', [fnbase, '.mat']))  load([fnbase, '.mat'], '-mat');    % re-read parameters to override saved settings  clear pars  params      fid            = fopen(dataf, 'a', 'ieee-le');  disp(sprintf('\nAppending to data file %s', dataf))enddisp(sprintf('\nCurrent parameter settings:'))disp(sprintf('\tbeta  = %6.3f', pars.beta))disp(sprintf('\trelax = %10.3e', pars.relax))disp(sprintf('\tdt    = %10.3e', pars.dt))disp(sprintf('\tt_max = %6.1f', t_max))disp(sprintf('\nStarting integration...'))while t < t_max  wdq_dt{tlev(1)} = dq_dt(wq, forcing, wavnum, pars);  wq              = step_ab3t(wq, wdq_dt, tlev, wavnum.wnum_dmp, pars.dt);  tlev            = tlev([3 1 2]);  t               = t + pars.dt;    if (t - t_last_diag) >= pars.dt_diag - sqrt(eps)    if any(any(isnan(wq)))      error('Floating point exception.')    end    disp(sprintf('\tt = %9.3f', t))    snapshot(fid, t, wq);    t_last_diag   = t;  end    if (t - t_last_chkpt) >= pars.dt_chkpt - sqrt(eps)    t_last_chkpt  = t;    chkptf        = [fnbase, '_t=', num2str(t)];    checkpoint(chkptf, pars, t, t_last_diag, t_last_chkpt, wq, wdq_dt, tlev)  endendfclose(fid);% save restart filecheckpoint(fnbase, pars, t, t_last_diag, t_last_chkpt, wq, wdq_dt, tlev)%quit  % exit matlab