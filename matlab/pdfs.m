% PDFs  Estimates pdfs potential vorticity fluctuations.path(path, '../density_estimation/')fnam           = 'beta=1_relax=0.16';pars.fdir      = '/home/tapio/data/ptjet/';% specify y-axis intervals for which pdfs are estimatedmax_y_bin      = 2.6;        % maximum y at which pdf is estimatedy_bin_width    = 0.2;        % width of binsny_bins        = 14;         % number of bins % upper and lower bounds of y-axis intervals ...y_bin_centers  = linspace(0, max_y_bin, ny_bins);y_bin_low      = y_bin_centers - .5 * y_bin_width;y_bin_up       = y_bin_centers + .5 * y_bin_width;% specify pv binspv_min         = -2;pv_max         =  6;npv_bins       = 1601;pv_bin_centers = linspace(pv_min, pv_max, npv_bins); pv_bin_count   = zeros(ny_bins, npv_bins);pv_mean        = zeros(ny_bins, 1);pv_var         = zeros(ny_bins, 1);% data directory and filedataf          = [pars.fdir, fnam, '.dat'];restf          = [pars.fdir, fnam, '.mat'];% read restart fileload(restf, '-mat')if pars.relax <= 0.002  t0           = 50 + 1.5/pars.relax;elseif pars.relax > 0.002 & pars.relax <= 0.015  t0           = 50 + 2/pars.relax;elseif pars.relax > 0.015 & pars.relax <= 0.06  t0           = 150;elseif pars.relax > 0.06  t0           = 150;end% extract dimension parametersnkx            = pars.nkx;nky            = pars.nky;nx             = pars.nx;ny             = pars.ny;% initialize wavenumbers wavnum         = wavnum_init(pars);% y-axisy              = linspace(-pars.widthy/2, pars.widthy/2, ny);% indices of y-axis intervals (in upper and lower half plane: use symmetry)iybin          = cell(ny_bins, 1);for j=1:ny_bins   iy_bin_up{j} = find(y >= y_bin_low(j)   & ...		      y <= y_bin_up(j) );  iy_bin_low{j}= find(y >= -y_bin_up(j)   & ...		      y <= -y_bin_low(j) );enddisp(sprintf('\nCurrent parameter settings:'))disp(sprintf('\tData file: %s', dataf))disp(sprintf('\tbeta  = %6.3f', pars.beta))disp(sprintf('\trelax = %10.3e', pars.relax))disp(sprintf('\tt0    = %6.1f', t0))disp(sprintf('\nComputing histograms ...'))nframes  = 0;fid      = fopen(dataf, 'r', 'ieee-le');[t, wq]  = read_snapshot(fid, nkx, nky);warning offwhile ~feof(fid)   if t >= t0    nframes    = nframes + 1;    gpv        = pv(wq, pars, y);    for j=1:ny_bins     % loop over y-axis intervals                  % interval in upper half plane      npts       = nx * length(iy_bin_up{j});      pv_vec     = reshape(gpv(:,iy_bin_up{j}), npts, 1);      pv_bin_count(j, :) = pv_bin_count(j, :) ...	  + hist(pv_vec, pv_bin_centers);      pv_mean(j) = pv_mean(j) + sum(pv_vec) / (2*npts);      pv_var(j)  = pv_var(j)  + sum(pv_vec.^2) / (2*npts);            % add interval in lower half plane, using statistical antisymmetry       pv_vec     = - reshape(gpv(:,iy_bin_low{j}), npts, 1);      pv_bin_count(j, :) = pv_bin_count(j, :) ...	  + hist(pv_vec, pv_bin_centers);      pv_mean(j) = pv_mean(j) + sum(pv_vec) / (2*npts);      pv_var(j)  = pv_var(j)  + sum(pv_vec.^2) / (2*npts);        end      end    [t, wq]        = read_snapshot(fid, nkx, nky);endwarning onfclose(fid);% normalize mean and variance correctlyfor j=1:ny_bins  pv_mean(j)   = pv_mean(j) / nframes;  pv_var(j)    = pv_var(j)  / nframes - pv_mean(j)^2;end% save histograms to filesave([pars.fdir, fnam, '_pv_hist', '.mat'], ...     'ny_bins', 'y_bin_low', 'y_bin_up', ...     'pv_mean', 'pv_var', ...     'pv_min', 'pv_max', 'npv_bins', 'pv_bin_count', ...     '-mat')  % kernel density estimateskdepars.imptyp = -1;               % indicates input to kdeSM is binned datakdepars.vxgrid = [pv_min, pv_max, npv_bins];  % binspv_pdf         = zeros(ny_bins, npv_bins);for j=1:ny_bins  pdf(j, :)    = kdeSM(pv_bin_count(j,:)', kdepars)';endpv_std = sqrt(pv_var);% make plots including Gaussian density of same mean and varianceinit_figurefor j=1:ny_bins  semilogy(pv_bin_centers, pdf(j,:), 'k', ...	   pv_bin_centers, ...	   normpdf(pv_bin_centers, pv_mean(j), pv_std(j)), 'k--')  axis([-.8, 2.1 1e-4 8])  ylabel('Probability density')  xlabel('Absolute vorticity')  title([sprintf('%1.1f < y < %1.1f', y_bin_low(j), y_bin_up(j)), ...	' (\mu=', sprintf('%1.2f', pv_mean(j)), ...	'; \sigma=', sprintf('%1.3f)', pv_std(j))])    print('-deps', ...	[pars.fdir, fnam, '_pv_pdf_y=', num2str(y_bin_centers(j)), '.eps'])  end