%STATS_PTJET%clear allfclose('all');fnam         = 'beta=1_relax=0.000625';pars.fdir    = 'data/';% data directory and filedataf        = [pars.fdir, fnam, '.dat'];restf        = [pars.fdir, fnam, '.mat'];switch fnam case {'beta=1_relax=0.00125'}  lclr   = 'c';  otherwise  lclr   = 'b';end% read parameter and restart fileload(restf, '-mat')if pars.relax <= 0.002  t0         = 50 + 1.5/pars.relax;elseif pars.relax > 0.002 & pars.relax <= 0.015  t0         = 50 + 2/pars.relax;elseif pars.relax > 0.015 & pars.relax <= 0.06  t0         = 150;elseif pars.relax > 0.06  t0         = 150;end% extract dimension parametersnkx          = pars.nkx;nky          = pars.nky;nx           = pars.nx;ny           = pars.ny;% grid axesx            = linspace(0, pars.widthx, nx)';y            = linspace(-pars.widthy/2, pars.widthy/2, ny);dy           = gradient(y);dy(1)        = 0.5*dy(1);dy(end)      = 0.5*dy(end);% initialize wavenumbers wavnum       = wavnum_init(pars);% indices of points in the "interior" of the domainint_pts      = find(abs(y) < .95 * max(y));% initialize statisticsmpv          = zeros(1, ny);mens         = zeros(1, ny);mpv_flux     = zeros(1, ny);mu           = zeros(1, ny);mv           = zeros(1, ny);mke          = zeros(1, ny);disp(sprintf('\nCurrent parameter settings:'))disp(sprintf('\tbeta  = %6.3f', pars.beta))disp(sprintf('\trelax = %10.3e', pars.relax))disp(sprintf('\tt0    = %6.1f', t0))disp(sprintf('\nReading data file:       %s', dataf))nstat        = 0;fid          = fopen(dataf, 'r', 'ieee-le');[t, wq]      = read_snapshot(fid, nkx, nky);warning offwhile ~feof(fid)   if t >= t0     nstat    = nstat + 1;        gpv      = pv(wq, pars, y);    [u, v]   = velocities(wq, wavnum, pars);        mpv      = mpv      + mean(gpv);    mens     = mens     + .5 * mean(gpv.^2);    mu       = mu       + mean(u);    mv       = mv       + mean(v);    mke      = mke      + .5 * mean(u.^2 + v.^2);    mpv_flux = mpv_flux + mean(gpv .* v);  end      [t, wq]    = read_snapshot(fid, nkx, nky);endwarning onfclose(fid);disp(sprintf('\tStatistics computed from %d instants.', nstat))% divide by number of degrees of freedommens     = mens  / nstat;mpv      = mpv   / nstat;mens     = nstat / (nstat-1)*(mens - .5 * mpv.^2);mu       = mu    / nstat;mv       = mv    / nstat;mke      = mke   / nstat;mpv_flux = mpv_flux / nstat;%figure(1); plot(mpv, y, lclr); hold on%figure(2); plot(mens(int_pts), y(int_pts), lclr); hold on%figure(3); plot(mpv_flux(int_pts), y(int_pts), lclr); hold on%figure(4); plot(mke, y, lclr); hold onsave([pars.fdir, fnam, '_stat', '.mat'], 'mens', 'mpv', 'mu', 'mke', ...     'mpv_flux', '-mat')  